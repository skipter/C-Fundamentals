private class Method
{
	public Method(Type returnType, string name, params Type[] parameterType) 
	{
		this.ReturnType = returnType;
		this.Name = name;
		this.ParameterType = parameterType;
	}
	
	public Type ReturnType {get;}
	public string Name {get;}
	public Type[] ParameterType {get;}
			
}

[Test]
public void ValidateMethods()
{
	var type = GetType("Table");
	
	var methods = new[] 
	{
		new Method(typeof(void), "Test", typeof(int)),
		new Method(typeof(void), "Test2", typeof(IFood))
	};
	ValidateMethods(type, methods);
}

private static void ValidateMethods(Type type, IEnumerable<Method> methods)
{
	foreach (var expectedMethod in methods)
	{
		var expectedReturnType = expectedMethod.ReturnType;
		var expectedMethodName = expectedMethod.Name;
		var expectedParameters = expectedMethod.ParameterType;
		
		var actualMethod = type.GetMethod(expectedMethodName);
		Assert.That(actualMethod, Is.Not.Null, $"{type}.{expectedMethodName}() does not exist!")
		
		var actualReturnType = actualMethod.ReturnType;
		Assert.That(actualReturnType, Is.EqualTo(expectedReturnType), $"{type}.{expectedMethodName}() has the wrong return type!");
		
		var actualParametes = actualMethod.GetParameters();
		for ( var i = 0; i < expectedMethod.Lenght; i++)
		{
			var expectedParameter = expectedParameters[i];
			var actualParameter = expectedParameters[i];
			
			var expectedParameterType = expectedParameter;
			var actualParameterType = actualParameter.ParameterType;
			
			Assert.That(actualParameterType, Is.EqualTo(expectedParameterType), $"{type}.{expectedMethodName}() parameter {i + 1} has incorrect type!");
					
		}
	}
}